basePath: /
definitions:
  dto.AdsCreateRequest:
    properties:
      active_from:
        type: string
      active_to:
        type: string
      comic_id:
        type: integer
      direct_url:
        type: string
      image:
        type: string
      title:
        type: string
      type:
        enum:
        - internal
        - external
        type: string
    required:
    - title
    - type
    type: object
  dto.AdsResponse:
    properties:
      active_from:
        type: string
      active_to:
        type: string
      comic_id:
        type: integer
      created_at:
        type: string
      created_by_name:
        type: string
      direct_url:
        type: string
      id:
        type: integer
      image:
        type: string
      title:
        type: string
      type:
        type: string
      updated_at:
        type: string
      updated_by_name:
        type: string
    type: object
  dto.AdsUpdateRequest:
    properties:
      active_from:
        type: string
      active_to:
        type: string
      comic_id:
        type: integer
      direct_url:
        type: string
      id:
        type: integer
      image:
        type: string
      title:
        type: string
      type:
        enum:
        - internal
        - external
        type: string
    required:
    - id
    type: object
  dto.ChapterItemCreateRequest:
    properties:
      active:
        type: boolean
      active_from:
        type: string
      chapter_id:
        type: integer
      image:
        type: string
      page:
        type: integer
    required:
    - chapter_id
    - image
    - page
    type: object
  dto.ChapterItemResponse:
    properties:
      active:
        type: boolean
      active_from:
        type: string
      chapter_id:
        type: integer
      created_at:
        type: string
      created_by_name:
        type: string
      id:
        type: integer
      image:
        type: string
      page:
        type: integer
      updated_at:
        type: string
      updated_by_name:
        type: string
    type: object
  dto.ChapterItemUpdateRequest:
    properties:
      active:
        type: boolean
      active_from:
        type: string
      id:
        type: integer
      image:
        type: string
      page:
        type: integer
    required:
    - id
    type: object
  dto.ComicRequest:
    properties:
      active:
        type: boolean
      audience:
        type: string
      code:
        type: string
      cover:
        type: string
      description:
        type: string
      language:
        type: string
      title:
        type: string
    required:
    - title
    type: object
  dto.ComicResponse:
    properties:
      active:
        type: boolean
      audience:
        type: string
      code:
        type: string
      cover:
        type: string
      created_at:
        type: string
      created_by:
        type: integer
      created_by_name:
        type: string
      description:
        type: string
      id:
        type: integer
      language:
        type: string
      title:
        type: string
      updated_at:
        type: string
      updated_by:
        type: integer
      updated_by_name:
        type: string
    type: object
  dto.ComicUpdateRequest:
    properties:
      active:
        type: boolean
      audience:
        type: string
      code:
        type: string
      cover:
        type: string
      created_by:
        type: integer
      description:
        type: string
      id:
        type: integer
      language:
        type: string
      title:
        type: string
    required:
    - id
    type: object
  dto.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  dto.GenreCreateRequest:
    properties:
      language:
        type: string
      name:
        type: string
      position:
        type: integer
    required:
    - language
    - name
    - position
    type: object
  dto.GenreResponse:
    properties:
      created_at:
        type: string
      created_by_name:
        type: string
      id:
        type: integer
      language:
        type: string
      name:
        type: string
      position:
        type: integer
      updated_at:
        type: string
      updated_by_name:
        type: string
    type: object
  dto.GenreUpdateRequest:
    properties:
      id:
        type: integer
      language:
        type: string
      name:
        type: string
      position:
        type: integer
    required:
    - id
    - language
    - name
    - position
    type: object
  dto.LoginRequest:
    properties:
      password:
        minLength: 7
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        type: string
      access_token_expires_at:
        type: string
      user:
        $ref: '#/definitions/dto.UserDetailDto'
    type: object
  dto.TierModel:
    properties:
      code:
        type: string
      id:
        type: integer
    type: object
  dto.UploadImageResponse:
    properties:
      image:
        type: string
    type: object
  dto.UserChangePasswordRequest:
    properties:
      current_password:
        minLength: 7
        type: string
      new_password:
        minLength: 7
        type: string
    required:
    - current_password
    - new_password
    type: object
  dto.UserDetailDto:
    properties:
      active:
        type: boolean
      avatar:
        type: string
      birthday:
        type: string
      description:
        type: string
      display_name:
        type: string
      email:
        type: string
      first_name:
        type: string
      full_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone:
        type: string
      role_name:
        type: string
      tier_code:
        type: string
      tier_id:
        type: integer
      username:
        type: string
    type: object
  dto.UserResponse:
    properties:
      active:
        type: boolean
      avatar:
        type: string
      birthday:
        type: string
      created_at:
        type: string
      created_by_name:
        type: string
      description:
        type: string
      display_name:
        type: string
      email:
        type: string
      first_name:
        type: string
      full_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone:
        type: string
      role_name:
        type: string
      tier_code:
        type: string
      tier_id:
        type: integer
      updated_at:
        type: string
      updated_by_name:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Swagger Admin Comics API Documentation.
  title: Admin Comics API Documentation
  version: "1.0"
paths:
  /api/ads:
    get:
      consumes:
      - application/json
      description: Get list of advertisements with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Page size
        in: query
        name: page_size
        required: true
        type: integer
      - description: Filter by title
        in: query
        name: title
        type: string
      - description: Filter by type (internal/external)
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.AdsResponse'
            type: array
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get advertisement list
      tags:
      - ads
    post:
      consumes:
      - application/json
      description: Create a new advertisement
      parameters:
      - description: Advertisement Request
        in: body
        name: ad
        required: true
        schema:
          $ref: '#/definitions/dto.AdsCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AdsResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new advertisement
      tags:
      - ads
    put:
      consumes:
      - application/json
      description: Update an existing advertisement
      parameters:
      - description: Advertisement Update Request
        in: body
        name: ad
        required: true
        schema:
          $ref: '#/definitions/dto.AdsUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AdsResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update advertisement
      tags:
      - ads
  /api/ads/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an advertisement by ID
      parameters:
      - description: Advertisement ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete advertisement
      tags:
      - ads
  /api/chapter-items:
    get:
      consumes:
      - application/json
      description: Get list of chapter items with pagination
      parameters:
      - description: Chapter ID
        in: query
        name: chapter_id
        required: true
        type: integer
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Page size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ChapterItemResponse'
            type: array
      security:
      - BearerAuth: []
      summary: List chapter items
      tags:
      - chapter-items
    post:
      consumes:
      - application/json
      description: Create a new chapter item (page)
      parameters:
      - description: Chapter Item Request
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/dto.ChapterItemCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ChapterItemResponse'
      security:
      - BearerAuth: []
      summary: Create chapter item
      tags:
      - chapter-items
    put:
      consumes:
      - application/json
      description: Update an existing chapter item
      parameters:
      - description: Chapter Item Update Request
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/dto.ChapterItemUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ChapterItemResponse'
      security:
      - BearerAuth: []
      summary: Update chapter item
      tags:
      - chapter-items
  /api/chapter-items/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a chapter item by ID
      parameters:
      - description: Chapter Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Delete chapter item
      tags:
      - chapter-items
    get:
      consumes:
      - application/json
      description: Get a chapter item by ID
      parameters:
      - description: Chapter Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ChapterItemResponse'
      security:
      - BearerAuth: []
      summary: Get chapter item
      tags:
      - chapter-items
  /api/chapter-items/upload-image:
    post:
      consumes:
      - multipart/form-data
      description: Upload an image for a chapter item
      parameters:
      - description: Image file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UploadImageResponse'
      security:
      - BearerAuth: []
      summary: Upload chapter image
      tags:
      - chapter-items
  /api/comic/comic/{id}:
    get:
      consumes:
      - application/json
      description: Get a comic by ID
      parameters:
      - description: Comic ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ComicResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a comic
      tags:
      - comics
  /api/comic/comics:
    get:
      consumes:
      - application/json
      description: List all comics
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ComicResponse'
            type: array
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List comics
      tags:
      - comics
  /api/comic/create:
    post:
      consumes:
      - application/json
      description: Create a new comic with the provided details
      parameters:
      - description: Comic Request
        in: body
        name: comic
        required: true
        schema:
          $ref: '#/definitions/dto.ComicRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ComicResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new comic
      tags:
      - comics
  /api/comic/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a comic by ID
      parameters:
      - description: Comic ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a comic
      tags:
      - comics
  /api/comic/update:
    put:
      consumes:
      - application/json
      description: Update a comic with the provided details
      parameters:
      - description: Comic Update Request
        in: body
        name: comic
        required: true
        schema:
          $ref: '#/definitions/dto.ComicUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ComicResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a comic
      tags:
      - comics
  /api/comic/upload-cover:
    post:
      consumes:
      - multipart/form-data
      description: Upload a comic cover image
      parameters:
      - description: Comic Cover Image
        in: formData
        name: cover
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Image URL
          schema:
            $ref: '#/definitions/dto.UploadImageResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload a comic cover
      tags:
      - comics
  /api/general/tiers:
    get:
      consumes:
      - application/json
      description: Get tiers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TierModel'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get tiers
      tags:
      - general
  /api/genre:
    get:
      consumes:
      - application/json
      description: List all genre
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      - description: Name
        in: query
        name: name
        type: string
      - description: Language
        in: query
        name: language
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GenreResponse'
            type: array
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List genres
      tags:
      - genres
    post:
      consumes:
      - application/json
      description: Create a new genre
      parameters:
      - description: Genre Request
        in: body
        name: genre
        required: true
        schema:
          $ref: '#/definitions/dto.GenreCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GenreResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new genre
      tags:
      - genres
    put:
      consumes:
      - application/json
      description: Update a new genre
      parameters:
      - description: Genre Request
        in: body
        name: genre
        required: true
        schema:
          $ref: '#/definitions/dto.GenreUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GenreResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a new genre
      tags:
      - genres
  /api/genre/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a genre by ID
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a genre
      tags:
      - genres
    get:
      consumes:
      - application/json
      description: Get a genre by ID
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GenreResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a genre
      tags:
      - genres
  /api/user:
    get:
      consumes:
      - application/json
      description: List all user
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      - description: Username
        in: query
        name: username
        type: string
      - description: Phone
        in: query
        name: phone
        type: string
      - description: Email
        in: query
        name: email
        type: string
      - description: Name
        in: query
        name: name
        type: string
      - description: Display name
        in: query
        name: display_name
        type: string
      - description: Tier ID
        in: query
        name: tier_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserResponse'
            type: array
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: Username (Alphanumeric)
        in: formData
        name: username
        required: true
        type: string
      - description: Phone Number
        in: formData
        name: phone
        type: string
      - description: Email Address
        in: formData
        name: email
        type: string
      - description: Birthday (YYYY-MM-DD)
        in: formData
        name: birthday
        type: string
      - description: 'Password (Min: 7 chars)'
        in: formData
        name: password
        required: true
        type: string
      - description: First Name
        in: formData
        name: first_name
        type: string
      - description: Last Name
        in: formData
        name: last_name
        type: string
      - description: Display Name
        in: formData
        name: display_name
        required: true
        type: string
      - description: Description
        in: formData
        name: description
        type: string
      - description: Avatar File
        in: formData
        name: avatar
        type: file
      - description: Tier ID
        in: formData
        name: tier_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserDetailDto'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a new user
      parameters:
      - description: ID
        in: formData
        name: id
        required: true
        type: integer
      - description: Username (Alphanumeric)
        in: formData
        name: username
        required: true
        type: string
      - description: Phone Number
        in: formData
        name: phone
        type: string
      - description: Email Address
        in: formData
        name: email
        type: string
      - description: Birthday (YYYY-MM-DD)
        in: formData
        name: birthday
        type: string
      - description: First Name
        in: formData
        name: first_name
        type: string
      - description: Last Name
        in: formData
        name: last_name
        type: string
      - description: Display Name
        in: formData
        name: display_name
        required: true
        type: string
      - description: Description
        in: formData
        name: description
        type: string
      - description: Avatar File
        in: formData
        name: avatar
        type: file
      - description: Tier ID
        in: formData
        name: tier_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserDetailDto'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a new user
      tags:
      - users
  /api/user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserDetailDto'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a user
      tags:
      - users
  /api/user/{id}/active:
    put:
      consumes:
      - application/json
      description: Activate/Deactivate a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Activate/Deactivate a user
      tags:
      - users
  /api/user/change-password:
    put:
      consumes:
      - application/json
      description: Change password
      parameters:
      - description: Change Password Request
        in: body
        name: ChangePassword
        required: true
        schema:
          $ref: '#/definitions/dto.UserChangePasswordRequest'
      responses:
        "200":
          description: OK
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - users
  /api/user/login:
    post:
      consumes:
      - application/json
      description: Authenticates the user and returns a JWT token
      parameters:
      - description: User Login Data
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Invalid request
      summary: Login
      tags:
      - users
  /api/user/profile:
    get:
      consumes:
      - application/json
      description: Get profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserDetailDto'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update profile
      parameters:
      - description: Username (Alphanumeric)
        in: formData
        name: username
        required: true
        type: string
      - description: Phone Number
        in: formData
        name: phone
        type: string
      - description: Email Address
        in: formData
        name: email
        type: string
      - description: Birthday (YYYY-MM-DD)
        in: formData
        name: birthday
        type: string
      - description: First Name
        in: formData
        name: first_name
        type: string
      - description: Last Name
        in: formData
        name: last_name
        type: string
      - description: Display Name
        in: formData
        name: display_name
        required: true
        type: string
      - description: Description
        in: formData
        name: description
        type: string
      - description: Avatar File
        in: formData
        name: avatar
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update profile
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
